#!/bin/bash
set -e
set -v

until [ -f /opt/instruqt/bootstrap/host-bootstrap-completed ]
do
    sleep 1
done
echo "source /usr/share/bash-completion/bash_completion" >> /root/.bashrc

VAULT_VERSION=1.7.4
TERRAFORM_VERSION=1.0.7
CONSUL_VERSION=1.10.2
BOUNDARY_VERSION=0.11.0

# Install Vault
curl -fsSL -o /tmp/vault.zip "https://releases.hashicorp.com/vault/${VAULT_VERSION}+ent/vault_${VAULT_VERSION}+ent_linux_amd64.zip"
unzip -o -d /usr/local/bin/ /tmp/vault.zip

# Install Terraform
curl -fsSL -o /tmp/terraform.zip "https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip"
unzip -o -d /usr/local/bin/ /tmp/terraform.zip

# Install Consul
curl -fsSL -o /tmp/consul.zip "https://releases.hashicorp.com/consul/${CONSUL_VERSION}/consul_${CONSUL_VERSION}_linux_amd64.zip"
unzip -o -d /usr/local/bin/ /tmp/consul.zip

# Install Boundary
curl -fsSL -o /tmp/boundary.zip "https://releases.hashicorp.com/boundary/${BOUNDARY_VERSION}/boundary_${BOUNDARY_VERSION}_linux_amd64.zip"
unzip -o -d /usr/local/bin/ /tmp/boundary.zip

cd /tmp
git clone https://github.com/Andrew-Klaas/instruqt-zt-lab.git

# Copy additional files.
cp instruqt-zt-lab/assets/systemd-files/envoy /usr/local/bin/envoy
cp instruqt-zt-lab/assets/systemd-files/consul.service /etc/systemd/system/consul.service
cp instruqt-zt-lab/assets/systemd-files/vault.service /etc/systemd/system/vault.service
cp instruqt-zt-lab/assets/systemd-files/boundary-controller.service /etc/systemd/system/boundary-controller.service
cp instruqt-zt-lab/assets/systemd-files/boundary-worker.service /etc/systemd/system/boundary-worker.service
cp instruqt-zt-lab/assets/systemd-files/boundary.service /etc/systemd/system/boundary.service

cp -r instruqt-zt-lab/assets/terraform-boundary /root/

mkdir /etc/consul.d
mkdir /etc/vault.d
mkdir /etc/boundary.d
mkdir /tmp/consul
mkdir /tmp/vault
mkdir /tmp/boundary

systemctl daemon-reload
systemctl enable consul.service
systemctl enable vault.service
systemctl enable boundary-controller.service
systemctl enable boundary-worker.service

####################################
# Configure Consul Server
####################################
HOST_IP_ADDR=$(ifconfig ens4 | grep "inet " | awk '{ print$2 }')
cat << EOF > /etc/consul.d/consul.hcl
datacenter = "dc1"
data_dir = "/tmp/consul"
server = true
log_level = "INFO"
node_name = "hashistack-server"
bootstrap_expect = 1
client_addr = "$HOST_IP_ADDR 127.0.0.1"
bind_addr = "$HOST_IP_ADDR"
ui = true
ports {
  grpc = 8502
}
connect {
  enabled = true
}
EOF

apt update -y 
apt install -y dnsmasq
sed -i '1i nameserver 127.0.0.1\n' /etc/resolv.conf
bash -c "cat >/etc/dnsmasq.d/10-consul" << EOF
server=/consul/$HOST_IP_ADDR#8600
EOF

systemctl start consul
systemctl enable dnsmasq
sleep 10s
systemctl restart systemd-resolved
systemctl restart dnsmasq


echo "Consul install complete" >> /tmp/install.log

####################################
# Configure Vault Server
####################################
cat << EOF > /etc/vault.d/vault.hcl
storage "file" {
  path = "/tmp/vault/data"
}
listener "tcp" {
  address     = "0.0.0.0:8200"
  tls_disable = 1
}
# service_registration "consul" {
#   address = "$HOST_IP_ADDR:8500"
# }
api_addr = "http://$HOST_IP_ADDR:8200"
cluster_addr = "https://$HOST_IP_ADDR:8201"
ui = true
EOF

systemctl start vault

sleep 5s

vault operator init -key-shares=1  -key-threshold=1 --format json >> init.txt
ROOT_TOKEN=$(cat init.txt | jq -r .root_token)
UNSEAL_KEY=$(cat init.txt | jq -r .unseal_keys_b64[0])

vault operator unseal $UNSEAL_KEY
vault login $ROOT_TOKEN

#Create admin user
echo '
path "*" {
    capabilities = ["create", "read", "update", "delete", "list", "sudo"]
}' | vault policy write vault_admin -
vault auth enable userpass
vault write auth/userpass/users/vault password=vault policies=vault_admin

vault secrets enable transform
vault write transform/role/vault_go_demo transformations=ssn
vault write transform/transformations/tokenization/ssn \
    allowed_roles=vault_go_demo \
    max_ttl=24h

cat << EOF > go-app.policy
path "transform/*" {
  capabilities = ["read", "list", "create", "update", "delete"]
}
path "database/creds/vault_go_demo" {
  capabilities = ["read"]
}
path "*" {
 capabilities = ["read", "list", "create", "update", "delete"]
}
EOF
vault policy write go-app go-app.policy


# echo $INSTRUQT_AWS_ACCOUNTS
export AWS_ACCESS_KEY_ID=$INSTRUQT_AWS_ACCOUNT_VAULT_DYNAMIC_SECRETS_AWS_AWS_ACCESS_KEY_ID
export AWS_SECRET_ACCESS_KEY=$INSTRUQT_AWS_ACCOUNT_VAULT_DYNAMIC_SECRETS_AWS_AWS_SECRET_ACCESS_KEY
export AWS_ACCOUNT_NAME=$INSTRUQT_AWS_ACCOUNT_VAULT_DYNAMIC_SECRETS_AWS_ACCOUNT_NAME
export AWS_ACCOUNT_ID=$INSTRUQT_AWS_ACCOUNT_VAULT_DYNAMIC_SECRETS_AWS_ACCOUNT_ID
export AWS_ACCOUNT_USERNAME=$INSTRUQT_AWS_ACCOUNT_VAULT_DYNAMIC_SECRETS_AWS_USERNAME
export AWS_ACCOUNT_PASSWORD=$INSTRUQT_AWS_ACCOUNT_VAULT_DYNAMIC_SECRETS_AWS_PASSWORD

vault auth enable aws

# Configure Vault to communicate with the AWS account
vault write auth/aws/config/client \
    access_key=$AWS_ACCESS_KEY_ID \
    secret_key=$AWS_SECRET_ACCESS_KEY

# Register a role in the method
vault write auth/aws/role/my-role-iam \
    auth_type=iam \
    bound_iam_principal_arn=arn:aws:iam::$AWS_ACCOUNT_ID:* \
    policies=go-app \
    token_ttl=30m \
    token_max_ttl=30m

# Set the IAM Server ID Expected Header Value
#vault write auth/aws/config/client \
#    iam_server_id_header_value=instruqt.vault.example.com

db_service_avail="null"
while [ "${db_service_avail}" == "null" ] ; do
  echo "Waiting for postgres to be available"
  sleep 5s
  db_service_avail=$(curl --silent "http://localhost:8500/v1/catalog/services" | jq -r '.postgres')
done
sleep 5s

vault secrets enable database

vault write database/config/my-postgresql-database \
plugin_name=postgresql-database-plugin \
allowed_roles="my-role, vault_go_demo" \
connection_url="postgresql://{{username}}:{{password}}@postgres.service.consul:5432/vault_go_demo?sslmode=disable" \
username="postgres" \
password="password"

vault write database/roles/vault_go_demo \
db_name=my-postgresql-database \
creation_statements="CREATE ROLE \"{{name}}\" WITH LOGIN PASSWORD '{{password}}' VALID UNTIL '{{expiration}}'; \
ALTER USER \"{{name}}\" WITH SUPERUSER;" \
default_ttl="1h" \
max_ttl="24h"

vault read database/creds/vault_go_demo

echo "Vault install complete" >> /tmp/install.log

####################################
# Configure Boundary Server
####################################

#start Boundary in dev mode (Controller, worker, postgres container)
systemctl start boundary

#install psql
sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
apt-get -y update
sudo apt-get -y install postgresql

echo "Boundary install complete" >> /tmp/install.log

apt-get install -y golang
git clone https://github.com/Andrew-Klaas/aws-vault-go-demo-tokenization.git

exit 0













###################################################
# VAULT
###################################################
#Switch to Client 1 tab
############
#CHALLENGE 1: AWS Auth
############
#Client 1 Tab
vault login -method=userpass username=vault password=vault
vault auth list
vault secrets list

vault read auth/aws/config/client
vault write auth/aws/role/my-role-iam \
    auth_type=iam \
    bound_iam_principal_arn=arn:aws:iam::$AWS_ACCOUNT_ID:* \
    policies=go-app \
    token_ttl=30m \
    token_max_ttl=30m
vault read auth/aws/role/my-role-iam
vault login -method=aws role=my-role-iam

# Auth Code
 cat /tmp/aws-vault-go-demo-tokenization/config/db.go

############
#CHALLENGE 2: Dynamic Secrets
############
vault secrets list
vault read database/config/my-postgresql-database
vault write database/roles/vault_go_demo \
  db_name=my-postgresql-database \
  creation_statements="CREATE ROLE \"{{name}}\" WITH LOGIN PASSWORD '{{password}}' VALID UNTIL '{{expiration}}'; \
  ALTER USER \"{{name}}\" WITH SUPERUSER;" \
  default_ttl="1h" \
  max_ttl="24h"
vault read database/creds/vault_go_demo

############
#CHALLENGE 3: Tokenization/EaaS
############

vault write transform/role/vault_go_demo transformations=ssn
vault write transform/transformations/tokenization/ssn \
    allowed_roles=vault_go_demo \
    max_ttl=24h

vault read transform/role/vault_go_demo
vault read transform/transformations/tokenization/ssn


vault write transform/encode/vault_go_demo value=1111-2222-3333-4444 transformation=ssn
vault write transform/decode/vault_go_demo value=$(ENCODED_VAULT) transformation=ssn

############
#CHALLENGE 3: Test the webapp
############
systemctl start goapp

#Switch to App UI
#add a record: verify data is encrypted


#TODO: 
# goapp's DNS
# Add Boundary to the App
# Add Logging to the app




###################################################
# CONSUL
###################################################

#############
#CHALLENGE 1: GUI Clickthrough
#############
#Check Nodes
#Check Services


##############
# CHALLENGE 2:Consul Services
##############

cd /etc/consul.d/

cat consul.hcl
datacenter = "dc1"
retry_join = ["hashistack-server"]
retry_interval = ["5s"]
data_dir = "/tmp/consul"
server = false
log_level = "DEBUG"
node_name = "hashistack-client-1"
client_addr = "10.132.0.106 127.0.0.1"
bind_addr = "10.132.0.106"
ui = true
ports {
  grpc = 8502
}

cat goapp.hcl
service {
  name = "goapp"
  tags = [ "goapp" ]
  port = 9090
  connect {
    sidecar_service {
      proxy {
        upstreams = [
          {
            destination_name = "postgres"
            local_bind_port  = 5432
          }
        ]
      }
    }
  }
}

consul catalog services

#################
# Consul DNS
#################
dig postgres.service.consul


############################
# Define Consul Intentions
#############################
Client 1:
cat goapp.hcl

Client 2:
cat postgres.hcl

cat << EOF > ~/config-intentions-postgres-allow.hcl 
Kind = "service-intentions"
Name = "postgres"
Sources = [
  {
    Name   = "goapp"
    Action = "allow"
  },
  # NOTE: a default catch-all based on the default ACL policy will apply to
  # unmatched connections and requests. Typically this will be DENY.
]
EOF
consul config write config-intentions-postgres-allow.hcl

cat << EOF > ~/config-intentions-postgres-deny.hcl 
Kind = "service-intentions"
Name = "postgres"
Sources = [
  {
    Name   = "goapp"
    Action = "deny"
  },
  # NOTE: a default catch-all based on the default ACL policy will apply to
  # unmatched connections and requests. Typically this will be DENY.
]
EOF
consul config write config-intentions-postgres-deny.hcl

############################
# Test Consul Intentions
#############################
#systemctl restart goapp

 psql --host 127.0.0.1 --port 5432 --user postgres --dbname vault_go_demo





###################################################
# BOUNDARY
###################################################
#Switch to Server Tab
##############
# Challenge 1: Configure Boundary and Vault
##############
vault login -method=userpass username=vault password=vault
cd terraform-boundary/
vault policy write boundary-controller boundary-controller-policy.hcl
vault token create \
  -no-default-policy=true \
  -policy="boundary-controller" \
  -policy="go-app"
  -orphan=true \
  -period=20m \
  -renewable=true

# Edit terraform.tfvars

#feed token to terraform
terraform init;
terraform apply --auto-approve;

###############
# challenge 2: Expore the UI
###############
#login to Boundary and explore the UI
username: admin
password: password

#navigate to targets and note the Postgresql target
# Copy the target: ttcp_uJw5GWOygZ

# psql --host hashistack-client-2 --port 5432 --user postgres --dbname vault_go_demo
# boundary connect postgres -username=postgres -target-id=ttcp_rgaU4ZYRxI

###############
# challenge 3: Login via the CLI, and connect to a database
###############
export BOUNDARY_TOKEN=$(boundary authenticate password -auth-method-id ampw_1234567890 -login-name admin -password "password" -keyring-type=none -format=json | jq -r '.item.attributes.token')
echo $BOUNDARY_TOKEN

#Copy the postgres_server target from the corp_one org
export POSTGRES_TARGET=ttcp_uJw5GWOygZ
boundary targets authorize-session -id  $POSTGRES_TARGET
boundary connect postgres -target-id $POSTGRES_TARGET --dbname vault_go_demo

# SSH: ssh_server target (client2)
export SSH_TARGET=ttcp_NOc69dtAPD
boundary connect ssh -target-id $SSH_TARGET










############
- slug: getting-familiar-with-the-environment
  id: oj6ydqgrfeob
  type: challenge
  title: Getting familiar with the environment
  teaser: Test the various tool components
  notes:
  - type: text
    contents: First challenge placeholder text
  assignment: first assignment placeholder text
  tabs:
  - title: Server
    type: terminal
    hostname: hashistack-server
  - title: App UI
    type: service
    hostname: hashistack-client-1
    port: 9090
  - title: Vault UI
    type: service
    hostname: hashistack-server
    port: 8200
  - title: Consul UI
    type: service
    hostname: hashistack-server
    port: 8500
  - title: Boundary UI
    type: service
    hostname: hashistack-server
    port: 9200
  - title: Client 1
    type: terminal
    hostname: hashistack-client-1
  - title: Client 2
    type: terminal
    hostname: hashistack-client-2
  - title: Terraform Editor
    type: code
    hostname: hashistack-server
    path: /root/terraform-boundary/main.tf
  difficulty: basic
  timelimit: 60000